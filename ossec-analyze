#!/usr/bin/env python3
import sys, json, collections

by_rule    = collections.Counter()  # sidid or comment
by_rulemsg = collections.Counter()  # comments
by_ip      = collections.Counter()
by_user    = collections.Counter()
by_prog    = collections.Counter()
critical   = []
total      = 0

def get(d, *path, default=None):
    for k in path:
        if not isinstance(d, dict) or k not in d:
            return default
        d = d[k]
    return d

def consume(evt):
    global total
    total += 1
    lvl   = get(evt, "rule", "level", default=0) or 0
    sidid = get(evt, "rule", "sidid")
    msg   = get(evt, "rule", "comment") or "unknown"
    prog  = evt.get("program_name") or evt.get("decoder") or "unknown"

    # track users
    for ukey in ("srcuser","dstuser","user"):
        u = evt.get(ukey)
        if u: by_user[u] += 1

    # track IPs
    ip = (get(evt, "data", "srcip") or evt.get("srcip") or
          evt.get("srcipaddress") or get(evt, "agent", "ip"))
    if ip: by_ip[ip] += 1

    key = str(sidid) if sidid is not None else msg
    by_rule[key] += 1
    by_rulemsg[msg] += 1
    by_prog[prog] += 1

    if lvl >= 10:
        critical.append(evt)

def parse_stdin(buf):
    if not buf.strip():
        return
    # JSON array?
    if buf.lstrip().startswith('['):
        try:
            arr = json.loads(buf)
            if isinstance(arr, list):
                for x in arr:
                    if isinstance(x, dict): consume(x)
                return
        except Exception:
            pass
    # NDJSON fallback
    for line in buf.splitlines():
        line=line.strip()
        if not line: continue
        try:
            evt=json.loads(line)
        except Exception:
            continue
        if isinstance(evt, dict): consume(evt)

buf = sys.stdin.read()
parse_stdin(buf)

out = {
  "summary": {
    "total_alerts": total,
    "top_rules": by_rule.most_common(5),
    "top_messages": by_rulemsg.most_common(5),
    "top_programs": by_prog.most_common(5),
    "top_users": by_user.most_common(5),
    "top_ips": by_ip.most_common(5),
    "critical_count": len(critical)
  },
  "sample_critical": critical[:5]
}
print(json.dumps(out, indent=2))
